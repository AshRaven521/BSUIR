  #include "bit_ops.h"

// Возвращает бит номер n числа x.
// Предполагается 0 <= n <= 31
unsigned get_bit(unsigned x,
                 unsigned n) {
  //Сдвигаем на n позиций число вправо и делаем побитовое И
  return (x >> n) & 1; 
}
// Выставляет значение v в бите номер n
// Предполагается что 0 <= n <= 31 и v равно 0 или 1
void set_bit(unsigned * x,
             unsigned n,
             unsigned v) {
  //Сдвигаем 1 на n позиций, делаем ее инверсию и накладываем полученную маску на число, тем самым зануляя нужный бит
  //Двигаем v на позиций и делаем побитовое или с результатом, полученным ранее             
  *x = (*x & ~(1 << n)) | (v << n);
}
// Меняет значение бита номер n на противоположное.
// Предполагается что 0 <= n <= 31
void flip_bit(unsigned * x,
              unsigned n) {
  //Сдвигаем на n позиций 1, чтобы получить маску и делаем XOR с этой маской
  *x ^= 1 << n;
}

